#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp disable

-include_lib("sudoku/include/sudoku.hrl").

getopts([], Acc) -> lists:reverse(Acc);

getopts(["-f", File | Args], Acc) ->    % Solve puzzle from file
    getopts(Args, [{puzzlefile, File} | Acc]);
getopts(["-genbad" | Args], Acc) ->     % Generate pathological puzzle
    getopts(Args, [{genbad, true} | Acc]);

getopts(["-benchmark" | Args], Acc) ->  % Run benchmark test 
    getopts(Args, [{benchmark, true} | Acc]);
getopts(["-c", Complexity | Args], Acc) ->
    getopts(Args, [{complexity, list_to_integer(Complexity)} | Acc]);
getopts(["-d", D | Args], Acc) ->
    getopts(Args, [{difficulty, list_to_integer(D)} | Acc]);
getopts(["-n", N | Args], Acc) ->
    getopts(Args, [{count, list_to_integer(N)} | Acc]);
getopts(["-t" | Args], Acc) ->
    getopts(Args, [{concurrent, true} | Acc]);
getopts(["-s", S | Args], Acc) ->
    getopts(Args, [{seed, list_to_integer(S)} | Acc]);
getopts([BadArg | _], _) ->
    io:format("Bad argument ~p~n", [BadArg]),
    erlang:halt().

main(Args) ->
    Opts = getopts(Args, []),
    application:start(sudoku),
    case proplists:is_defined(concurrent, Opts) of
        true -> application:set_env(sudoku, concurrent, true);
        _ -> ok
    end,
    Complx = proplists:get_value(complexity, Opts, 3),
    N = proplists:get_value(count, Opts, 1),
    D = proplists:get_value(difficulty, Opts, 60),
    Seed = proplists:get_value(seed, Opts, element(3,now()) ),
    Benchmark = proplists:get_value(benchmark,Opts,false),
    PuzzleFile = proplists:get_value(puzzlefile,Opts,false),
    Genpath = proplists:get_value(genbad,Opts,false),
    if 
        Benchmark == true ->
            io:format("complexity:~p count:~p difficulty:~p seed:~p~n",
                      [Complx, N, D, Seed]),
            Acc = benchmark(Complx, N, D, Seed),
            Fn = fun({X,T1,T2,T3,T4}) ->
                    io:format("~p    ~p    ~p    ~p    ~p~n", [X,T1,T2,T3,T4])
                 end,
            io:format("count   seq     parallel    seq-conc     par-conc~n"),
            lists:map(Fn, Acc);
        PuzzleFile =/= false ->
            {ok, Puzzles} = file:consult(PuzzleFile),
            Fn = fun(Tbl) -> {erlang:trunc(math:sqrt(size(Tbl))), Tbl} end,
            Time=solve( lists:map(Fn, Puzzles), [] ),
            io:format("Time taken to evaluate: ~puS~n", [Time]);
        Genpath == true ->
            Table = genpathological(Complx, D),
            io:format("~nPathological combination ~n~p~n", [Table]);
        true ->
            io:format("complexity:~p count:~p difficulty:~p seed:~p~n",
                      [Complx, N, D, Seed]),
            Tables = [
                {Complx, sudoku_gen:generate(switching, Seed+X, Complx, D)}
                || X <- lists:seq(1, N)
            ],
            Time = solve(Tables, []),
            lists:map(fun(Tbl) -> io:format("~p~n", [Tbl]) end, Tables),
            io:format("Time taken to evaluate: ~puS~n", [Time])
    end,
    application:stop(sudoku),
    erlang:halt().

% Command handlers
benchmark(0, _, Acc) -> Acc;
benchmark(N, AllTbls, Acc) ->
    {ok, Procs} = application:get_env(sudoku, procs),
    application:set_env(sudoku, procs, Procs+100),
    {Tables, _} = lists:split(N, AllTbls),

    % Time taken to solve the puzzles sequentially.
    SeqTime = solve(Tables, []),
    % Time taken to solve puzzles simultaneously.
    {ParTime, _} = timer:tc( sudoku_slv, psolve, [Tables] ),

    application:set_env(sudoku, concurrent, true),

    % Time taken to solve the puzzles sequentially - in concurrent mode.
    SeqTimeC = solve(Tables, []),
    % Time taken to solve puzzles simultaneously.
    {ParTimeC, _} = timer:tc( sudoku_slv, psolve, [Tables] ),

    benchmark(N-1, Tables, [{N, SeqTime, ParTime, SeqTimeC, ParTimeC} | Acc]).

benchmark(Complx, N, D, Seed) ->
    Tables = tables(Complx, N, D, Seed),
    benchmark(N, Tables, []).


genpathological(Complx, D) ->
    {_,_,Seed} = now(),
    Table = sudoku_gen:generate(switching, Seed, Complx, D),
    case timer:tc( sudoku_slv, solve, [Complx, Table] ) of
        {Time, _} when Time < 10000000-> genpathological(Complx, D);
        _ -> Table
    end.

% Local functions
solve([], Acc) -> lists:sum(Acc);
solve([{Complx, Table} | Tables], Acc) ->
    {Time, {passed, _OkTbl}} = timer:tc( sudoku_slv, solve, [Complx, Table] ),
    solve(Tables, [Time | Acc]).


tables(Complx, N, D, Seed) ->
    [ {Complx, sudoku_gen:generate(switching, Seed+X, Complx, D)} ||
      X <- lists:seq(1,N) ].

%d2_table() ->
%    { { 0, 0, 0, 1 },
%      { 0, 0, 0, 0 },
%      { 0, 0, 0, 0 },
%      { 0, 0, 0, 0 }
%    }.
%
%d3_table() ->
%    { { 0, 0, 0, 0, 6, 0, 4, 0, 3 },
%      { 4, 0, 0, 3, 0, 8, 0, 0, 6 },
%      { 0, 0, 0, 0, 5, 0, 0, 1, 7 },
%      { 0, 8, 0, 1, 0, 0, 5, 0, 2 },
%      { 3, 0, 0, 0, 2, 0, 0, 0, 8 },
%      { 6, 0, 2, 0, 0, 5, 0, 7, 0 },
%      { 1, 7, 0, 0, 3, 0, 8, 0, 0 },
%      { 2, 0, 0, 0, 0, 0, 0, 0, 5 },
%      { 9, 0, 6, 0, 8, 0, 0, 3, 0 }
%    }.
%
%d4_table() ->
%    { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
%      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
%    }.
% vim: filetype=erlang :
